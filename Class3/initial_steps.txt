We need the following lab setup with centos7 with minimal install only
 
1.	server.cnl.com – 1 CPU – 1GB RAM (Python 2.7)
2.	node1.cnl.com – 1 CPU – 1GB RAM ( python 2.6 and above)
3.	node2.cnl.com – 1 CPU – 1GB RAM ( python 2.6 and above)

Pre-requisites  - in all 3 machines

1.	Install epel-release repository in all machines

# yum install epel-release -y

systemctl disable firewalld;systemctl stop firewalld

2.	Install vim package in all 3 machines

# yum install vim -y

3.	Add the following in /etc/hosts file in all 3 machines (only need this step if you create your ansible lab in your local laptop)

192.168.93.11		server.cnl.com	server
192.168.93.12		node1.cnl.com	node1
192.168.93.13		node2.cnl.com	node2


3.1. in all 3 machines go to /etc/ssh/sshd_config file using vim editor.

vim /etc/ssh/sshd_config

# To disable tunneled clear text passwords, change to no here!
PasswordAuthentication yes --> this line should be un commented
#PermitEmptyPasswords no
#PasswordAuthentication no --> this line should be commented

3.2. In all 3 machines now you restart sshd service

systemctl restart sshd


4.	Create user called ansible in all machines
#useradd ansible

5.	Set password for ansible user in all machines
#passwd ansible

Enter the password as Redhat

6.	Login to all servers and enable sudo permission for ansible user with no password

Run visudo command

ansible ALL=(ALL)       NOPASSWD:       ALL


7.	Login as ansible user into ansible server - 


sudo su - ansible


8.	Create ssh keys in ansible server

[ansible@server ~]$ ssh-keygen

 
9.	From ansible server,from ansible user using ssh-copy-id command exchange the ssh keys to node1,node2 servers.

ssh-copy-id node1
ssh-copy-id node2

10.	Test the ssh keys are working or not ? how ?.

ssh to node1,node2 servers,while logging it shouldn’t ask any password.


11. Login into ansible server using ansible user


  # yum install ansible -y
                
	 
Make sure python-paramiko dependency should also be installed. 
paramiko package after installed only we can maintain the older version clients.
The paramiko transport is provided because many distributions, in particular EL6 and before do not support ControlPersist in their SSH implementations. This is needed on the Ansible control machine to be reasonably efficient with connections. Thus paramiko is faster for most users on these platforms.


python-httplib2 --> this package only helps to monitor the urls via ansible

python2-cryptography --> this package will help you to validate and control all SSL certificates
	
Post ansible package installation try to test the ansible  weather working or not ?

ansible --version
	 

If you get an error ,then update the cryptography package.

yum update python-cryptography
 
5	Create your environment directories.
      Create dev directory. From ansible point of view this dev directory is considered as one environment.
 Create ansible.cfg file like below
   Vim ansible.cfg
      [defaults]
      inventory=hosts
      remote_user=ansible
      timeout=3000
  in hosts file add your servers like below. (static inventory file)
  
Vim hosts
 [prod]
node1
[backup]
node2

6	Test your ansible environment is correctly configured or not ?
ansible all --list

[root@server dev]# ansible all --list
  hosts (2):
    node1
    node2
	
	
7	Test your client servers connectivity from ansible ?


ansible all -m ping  --> you must receive ping / pong in green



8. Now before playbook

you must do this in ansible server only

go to /home/ansible/ home directory

vim .vimrc

vim ~/.vmrc

set ai
set tabstop=2
set expandtab

save this file .Then logoff and login .

Or 

source ~/.vimrc



8.1 .  ansible-doc -l


