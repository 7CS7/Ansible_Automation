To start this handson lab,you need following resources.


*******************************************************************************************************************
prerequisites

1.	server.cnl.com – 1 CPU – 1GB RAM (Python 2.7) - Ansible Server
2.	node1.cnl.com – 1 CPU – 1GB RAM ( python 2.6 and above) - Ansible Client 1
3.	node2.cnl.com – 1 CPU – 1GB RAM ( python 2.6 and above) - Ansible Client 2

from ansible server login as an ansible user as per class 4.From ansible user execute below command

ansible all -m ping

this above ping command should return with ping / pong green color.

*******************************************************************************************************************


Now to run the command on all servers in a group, in this case, servers group, in 10 parallel forks:

$ ansible servers -a "/sbin/reboot" -f 1

servers --> ansible inventory group



Using the shell module looks like this:

$ ansible all -m shell -a 'echo $TERM'


To transfer a file directly to many servers:

$ ansible all -m copy -a "src=/etc/hosts dest=/tmp/hosts"


***************************************************************************************************************************************
File Transfer

The file module allows changing ownership and permissions on files. These same options can be passed directly to the copy module as well:

$ ansible webservers -m file -a "dest=/srv/foo/a.txt mode=600"
$ ansible webservers -m file -a "dest=/srv/foo/b.txt mode=600 owner=mdehaan group=mdehaan"

The file module can also create directories, similar to mkdir -p:

$ ansible webservers -m file -a "dest=/path/to/c mode=755 owner=mdehaan group=mdehaan state=directory"


As well as delete directories (recursively) and delete files:

$ ansible webservers -m file -a "dest=/path/to/c state=absent"

***************************************************************************************************************************************

Managing Packages

There are modules available for yum and apt. Here are some examples with yum.

Ensure a package is installed, but don’t update it:

$ ansible webservers -m yum -a "name=acme state=present"

Ensure a package is installed to a specific version:

$ ansible webservers -m yum -a "name=acme-1.5 state=present"

Ensure a package is at the latest version:

$ ansible webservers -m yum -a "name=acme state=latest"

Ensure a package is not installed:

$ ansible webservers -m yum -a "name=acme state=absent"

Ansible has modules for managing packages under many platforms. If there isn’t a module for your package manager, you can install packages using the command module or (better!) contribute a module for your package manager. Stop by the mailing list for info/details.

***************************************************************************************************************************************

Users and Groups

The ‘user’ module allows easy creation and manipulation of existing user accounts, as well as removal of user accounts that may exist:

$ ansible all -m user -a "name=foo password=<crypted password here>"

$ ansible all -m user -a "name=foo state=absent"

***************************************************************************************************************************************

Managing Services

Ensure a service is started on all webservers:

$ ansible webservers -m service -a "name=httpd state=started"

Alternatively, restart a service on all webservers:

$ ansible webservers -m service -a "name=httpd state=restarted"

Ensure a service is stopped:

$ ansible webservers -m service -a "name=httpd state=stopped"


**************************************************************************************************************************

Just validate the uptime of 1 to 200 remote servers
Just get the disk space of remote hosts
Ping and validate if the server is alive and responds
shutdown multiple remote hosts at a single command
